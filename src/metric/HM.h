
#include <array>

/*
	HM DIstance class.
	Plase note the "using" statement right after the end of the class definition,
	which essentially fixes the dimention and data type for the project.
*/
const float randomVector[100] = {1.293421904122479, 1.695729592843372, 1.6719711547501275, 1.1125228837930246, 0.3463672735101978, 2.5971576840006523, 0.47356529987958007, 1.607870549803747, 0.504348570202557, 0.1327015965966274, 0.8407478678805063, 0.6456343347779361, 0.46206423584782796, 2.8044360904022763, 0.3534170421373124, 0.6282496527409083, 1.9274343239417293, 0.4990746743196527, 0.5921481940274671, 0.8130506394674535, 0.9179098654981169, 2.200866777474638, 0.40211321758317176, -1.3506930204269914, 0.12762957633867444, 0.10920202607758023, 2.570930325030065, -0.4605109329252228, 0.8423316879709882, 1.15205339995524, -0.0740485753715252, 0.045156458950561085, 0.2486728341172454, 1.0997250136431282, 1.6454537117301937, 0.16106755903944003, 1.3920690584862614, -1.4652215168295029, -0.5424358569542365, -0.6279762680635221, 0.7619374180187857, 3.0929171613939617, 1.3566763325755058, -0.5312541712966932, -0.02377305717104128, 0.7017996282633281, 0.6932799170379931, 2.404980607473966, -0.008448366109641947, 2.3335701143286656, 1.3090544685544825, 2.191448471203553, 0.9563462046503907, 1.1400149967902473, 0.060111570351233934, -0.44140936723571844, 0.7249121336233216, 0.33947909232267026, 0.4648919733787267, 0.7053070163166842, 1.633584717421872, 1.19772923388379, 0.9386077636155997, 1.104913523982289, 2.4739178942285793, -1.054105970320074, 0.09365996218770678, 1.4459017426807432, -0.24716241373271308, 0.9539362096588104, 2.5927566117627183, 1.331241099010263, 0.5441611494927473, 0.612775214196773, 2.175193539933754, 0.03082934287696737, 3.4984740065183204, 1.324657895747359, 1.3169343164489682, 1.0419990579690943, 0.9771503679842581, 0.9961158732634766, 2.1773811411945507, 1.0589228792469443, 0.7382605888100975, 0.34476012880302054, 2.5047089037430803, 1.9419190323933844, 0.25790869276220685, 1.6906093837845844, 0.3285786883488989, 2.8397878421918317, 0.8987657999056778, 1.8006459208447074, 0.5466175819849189, 1.1089715571944254, 0.9068432426977688, 1.1991397711007348, -0.260606133167711, 0.535703106828273}; 


template <class PT, unsigned int length>
class HMPointG {
private:
	std::string str;
	std::string id;
public:
	HMPointG(const std::string ident, const std::string data) {
			str= data;
			id = ident;
	}
	const std::string& getId() const { return id; }
	const std::string& getValue() { return str; }
	const unsigned int dim() { return str.length(); }
	PT operator[](const int i) const { return str[i]; }

	double distance(HMPointG p) const {
		double sum = 0;
		for (int i = 0; i < str.length(); i++) {
			if(str[i] != p.str[i])
			{
				// std::cout<<i<<"\n";
				sum+=abs(randomVector[i]);
			}
		}
		// std::cout<<sum<<std::endl;
		return sum;
	}

	// friend std::ostream& operator<<(std::ostream& os, EuclidianPointG& n) {
	// 	os << "(" << n.id << ":<";
	// 	os << n.point[0];
	// 	for (int i = 1; i < DIM; i++) {
	// 		os << "," << n.point[i];
	// 	}
	// 	os << ">)";
	// 	return os;
	// }
};
static const unsigned int HMDIM = 10;
using EuclidianPointPointType = float;
// using EuclidianPoint = EuclidianPointG<EuclidianPointPointType, EuclidianPointDim>;
using HMPoint = HMPointG<EuclidianPointPointType, HMDIM>;

