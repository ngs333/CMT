language: cpp
dist: trusty

# In order to catch as many weird edge cases in the code with -Werror as
# possible, we want to test a large range of old and new compilers on both
# Linux and macOS. This gives us the best possible coverage while maintaining
# compatibility with a large number of compilers.
matrix:
  include:
    - name: "GCC 4.9 (Linux)"
      os: linux
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-4.9
            - ninja-build
      env:
         - MATRIX_EVAL="export CC=gcc-4.9 && export CXX=g++-4.9"

    - name: "GCC 9 (Linux)"
      os: linux
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-9
            - ninja-build
      env:
        - MATRIX_EVAL="export CC=gcc-9 && export CXX=g++-9"

    - name: "Clang 5.0 (Linux)"
      os: linux
      addons:
        apt:
          sources:
            - llvm-toolchain-trusty-5.0
          packages:
            - clang-5.0
            - ninja-build
      env:
        - MATRIX_EVAL="export CC=clang-5.0 && export CXX=clang++-5.0"

    - name: "Clang Xcode 11 (Mac)"
      os: osx
      osx_image: xcode11
      addons:
        homebrew:
          packages:
            - ninja

# NOTE: Currently I commented out testing of python binding on OSX because they do not support
# Python building and I have to provide the tools myself. I could probably install correct pip
# (and maybe python) version myself (homebrew?), however I haven't gotten to that yet.

before_install:
  - eval "${MATRIX_EVAL}"

install:
  - if [ $TRAVIS_OS_NAME == "linux" ]; then sudo apt-get install valgrind; fi
  - if [ $TRAVIS_OS_NAME == "linux" ]; then sudo -H pip install cython; fi  # Needed to build Python module.
  - if [ $TRAVIS_OS_NAME == "linux" ]; then sudo -H pip install cogapp; fi  # Needed to build Python module.

before_script:
  # Build C/C++ library and apps.
  - mkdir -p build && cd build && CXXFLAGS="-Werror" cmake -GNinja .. && ninja -v && cd ..

  # Build Python source distribution and install Edlib from it.
  - if [ $TRAVIS_OS_NAME == "linux" ]; then cd bindings/python && make sdist && cd ../..; fi
  - if [ $TRAVIS_OS_NAME == "linux" ]; then sudo -H pip install bindings/python/dist/edlib*.tar.gz; fi

script:
  # Test C/C++ library using CTest.
  - ninja -C build -v test && cat build/Testing/Temporary/LastTest.log
  # Check for memory leaks. Returns 2 if there was a memory leak/error, otherwise returns runTests exit code,
  # which is 0 if all went fine or 1 if some of the tests failed. I test for memory leaks only on linux because
  # osx returns errors from system libraries, which I would have to supress.
  # This is run only on smaller number of tests, since executing on valgrind is slow.
  - if [ $TRAVIS_OS_NAME == "linux" ]; then valgrind --quiet --error-exitcode=2 --tool=memcheck --leak-check=full build/bin/runTests 2; fi

  # Test Python module.
  - if [ $TRAVIS_OS_NAME == "linux" ]; then sudo -H python bindings/python/test.py; fi
